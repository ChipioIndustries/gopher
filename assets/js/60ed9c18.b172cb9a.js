"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[798],{3905:function(e,t,r){r.d(t,{Zo:function(){return o},kt:function(){return d}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function m(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),s=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},o=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,o=m(e,["components","mdxType","originalType","parentName"]),c=s(r),d=n,g=c["".concat(p,".").concat(d)]||c[d]||u[d]||l;return r?a.createElement(g,i(i({ref:t},o),{},{components:r})):a.createElement(g,i({ref:t},o))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=c;var m={};for(var p in t)hasOwnProperty.call(t,p)&&(m[p]=t[p]);m.originalType=e,m.mdxType="string"==typeof e?e:n,i[1]=m;for(var s=2;s<l;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},7616:function(e,t,r){r.r(t),r.d(t,{assets:function(){return o},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return m},metadata:function(){return s},toc:function(){return u}});var a=r(7462),n=r(3366),l=(r(7294),r(3905)),i=["components"],m={sidebar_position:2},p="Class",s={unversionedId:"api-reference/Class",id:"api-reference/Class",title:"Class",description:"A library for getting and parsing the Roblox API dump.",source:"@site/docs/api-reference/Class.md",sourceDirName:"api-reference",slug:"/api-reference/Class",permalink:"/gopher/docs/api-reference/Class",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Gopher",permalink:"/gopher/docs/api-reference/Gopher"},next:{title:"MemberType",permalink:"/gopher/docs/api-reference/MemberType"}},o={},u=[{value:"Constructor",id:"constructor",level:2},{value:"Functions",id:"functions",level:2},{value:"getAllMembers",id:"getallmembers",level:2},{value:"Parameters",id:"parameters",level:3},{value:"getAllMembersOfType",id:"getallmembersoftype",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"getAllMembersByTag",id:"getallmembersbytag",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"getMember",id:"getmember",level:2},{value:"Parameters",id:"parameters-3",level:3}],c={toc:u};function d(e){var t=e.components,r=(0,n.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"class"},"Class"),(0,l.kt)("p",null,"A library for getting and parsing the Roblox API dump."),(0,l.kt)("h2",{id:"constructor"},"Constructor"),(0,l.kt)("p",null,"Get a class through the Gopher library:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local class = Gopher:getClass("Instance")\n')),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Return Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Signature"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Dictionary"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#getAllMembers"},(0,l.kt)("inlineCode",{parentName:"a"},"getAllMembers(bool recursive)"))),(0,l.kt)("td",{parentName:"tr",align:null},"Get a dictionary of all members of the class.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Dictionary"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#getAllMembersOfType"},(0,l.kt)("inlineCode",{parentName:"a"},"getAllMembersOfType(MemberType memberType, bool recursive)"))),(0,l.kt)("td",{parentName:"tr",align:null},"Get a dictionary of all the class's members of a particular member type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Dictionary"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#getAllMembersByTag"},(0,l.kt)("inlineCode",{parentName:"a"},"getAllMembersByTag(string tag, bool recursive)"))),(0,l.kt)("td",{parentName:"tr",align:null},"Get a dictionary of all the class's members that have a particular tag.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Dictionary"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#getMember"},(0,l.kt)("inlineCode",{parentName:"a"},"getMember(string memberName)"))),(0,l.kt)("td",{parentName:"tr",align:null},"Get the info of the provided member.")))),(0,l.kt)("h2",{id:"getallmembers"},"getAllMembers"),(0,l.kt)("p",null,"Get a dictionary of all members of the class. If ",(0,l.kt)("inlineCode",{parentName:"p"},"recursive")," is true, this list will include inherited members."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local class = Gopher:getClass("BasePart")\n\nlocal members = class:getAllMembers()\nlocal allMembers = class:getAllMembers(true)\n\nprint(members.Name) -- nil\nprint(allMembers.Name) -- dictionary\n')),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"recursive"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"If true, the provided dictionary will include inherited members.")))),(0,l.kt)("h2",{id:"getallmembersoftype"},"getAllMembersOfType"),(0,l.kt)("p",null,"Get a dictionary of all the class's members of a particular member type. If ",(0,l.kt)("inlineCode",{parentName:"p"},"recursive")," is true, this list will include inherited members."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local class = Gopher:getClass("BasePart")\n\nlocal members = class:getAllMembersOfType(Gopher.MemberType.Property, true)\n\nprint(members.Name) -- dictionary\nprint(members.Touched) -- nil because Touched is not a property\n')),(0,l.kt)("h3",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MemberType"),(0,l.kt)("td",{parentName:"tr",align:null},"memberType"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"The type of members to return.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"recursive"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"If true, the provided dictionary will include inherited members.")))),(0,l.kt)("h2",{id:"getallmembersbytag"},"getAllMembersByTag"),(0,l.kt)("p",null,"Get a dictionary of all the class's members that have a particular tag. If ",(0,l.kt)("inlineCode",{parentName:"p"},"recursive")," is true, this list will include inherited members."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local class = Gopher:getClass("BasePart")\n\nlocal members = class:getAllMembersByTag("Deprecated", true)\n\nprint(members.Name) -- nil because Name is not deprecated\nprint(members.name) -- dictionary\n')),(0,l.kt)("h3",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"tag"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"The tag to search members for.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"recursive"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"If true, the provided dictionary will include inherited members.")))),(0,l.kt)("h2",{id:"getmember"},"getMember"),(0,l.kt)("p",null,"Get the info of the provided member. If ",(0,l.kt)("inlineCode",{parentName:"p"},"recursive")," is true, this function will work for inherited members."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local class = Gopher:getClass("BasePart")\n\nprint(class:getMember("Name", true)) -- dictionary\nprint(class:getMember("Name")) -- nil because Name is inherited\n')),(0,l.kt)("h3",{id:"parameters-3"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"The name of the member to return.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"recursive"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"If true, this function will work for inherited members.")))))}d.isMDXComponent=!0}}]);